{"ast":null,"code":"var _jsxFileName = \"/Users/calvarezberrios/Desktop/LambdaSchool/Projects/React-Todo/src/App.js\";\nimport React from 'react';\nimport TodoList from \"./components/TodoList\";\nimport SideBar from \"./components/SideBar\"; //localStorage.setItem(\"tasks\", \"\");\n\nconst savedTasks = localStorage.getItem(\"tasks\") ? JSON.parse(localStorage.getItem(\"tasks\")) : null;\n\nclass App extends React.Component {\n  // you will need a place to store your state in this component.\n  // design `App` to be the parent component of your application.\n  // this component is going to take care of state, and any change handlers you need to work with your state\n  constructor() {\n    super();\n\n    this.changeHandler = e => {\n      this.setState({\n        newTask: { ...this.state.newTask,\n          task: e.target.value\n        }\n      });\n    };\n\n    this.addTask = e => {\n      e.preventDefault();\n\n      if (this.state.newTask.task !== \"\") {\n        if (this.state.selectedList !== \"\") {\n          this.setState({\n            tasks: { ...this.state.tasks,\n              [this.state.selectedList.toLowerCase()]: [...this.state.tasks[this.state.selectedList.toLowerCase()], this.state.newTask]\n            }\n          }, () => localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks)));\n          this.setState({\n            newTask: {\n              task: \"\",\n              id: Date.now(),\n              completed: false\n            }\n          });\n        }\n      }\n    };\n\n    this.doubleClickTask = e => {\n      e.target.classList.toggle(\"completed\");\n      const targetId = Number(e.target.id);\n\n      for (let [, value] of Object.entries(this.state.tasks)) {\n        value.forEach(task => {\n          if (task.id === targetId) {\n            task.completed = !task.completed;\n          }\n        });\n      }\n\n      localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\n    };\n\n    this.clearCompleted = e => {\n      e.preventDefault();\n      this.setState({\n        tasks: { ...this.state.tasks,\n          [this.state.selectedList.toLowerCase()]: this.state.tasks[this.state.selectedList.toLowerCase()].filter(task => !task.completed)\n        }\n      }, () => localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks)));\n    };\n\n    this.searchInputChange = e => {\n      this.setState({\n        searchString: e.target.value\n      });\n      this.showAllTasks();\n    };\n\n    this.selectList = e => {\n      const selected = e.target.textContent;\n      this.setState({\n        selectedList: selected\n      });\n      this.setState({\n        searchResults: this.state.tasks[selected.toLowerCase()]\n      });\n    };\n\n    this.showAllTasks = () => {\n      const allTasks = [];\n\n      for (let [key] of Object.entries(this.state.tasks)) {\n        this.state.tasks[key].forEach(task => allTasks.push(task));\n        this.setState({\n          searchResults: allTasks\n        });\n      }\n\n      this.setState({\n        selectedList: \"\"\n      });\n    };\n\n    this.newList = () => {\n      const name = prompt(\"Enter a name for the new list\");\n\n      if (name !== \"\" && name !== null) {\n        this.setState({\n          tasks: { ...this.state.tasks,\n            [name.toLowerCase()]: []\n          }\n        }, () => localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks)));\n      }\n    };\n\n    this.deleteList = () => {\n      this.setState({\n        searchResults: []\n      });\n      delete this.state.tasks[this.state.selectedList.toLowerCase()];\n      localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\n      this.showAllTasks();\n      this.getTasksLists();\n    };\n\n    this.getSearchResults = () => {\n      const newResults = this.state.searchResults.filter(task => task.task.toLowerCase().includes(this.state.searchString.toLowerCase()));\n      this.setState({\n        searchResults: newResults\n      });\n    };\n\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.state.searchString !== prevState.searchString) {\n        if (this.state.searchString !== \"\") {\n          this.getSearchResults();\n        } else {\n          this.showAllTasks();\n        }\n      }\n\n      if (this.state.tasks !== prevState.tasks) {\n        this.setState({\n          searchResults: this.state.tasks[this.state.selectedList.toLowerCase()]\n        });\n        this.getTasksLists();\n      }\n    };\n\n    this.getTasksLists = () => {\n      let newTasksList = [];\n\n      for (let [key] of Object.entries(this.state.tasks)) {\n        let stringArray = key.split(\" \");\n        stringArray.forEach((string, index) => stringArray[index] = string[0].toUpperCase() + string.slice(1));\n        stringArray = stringArray.join(\" \");\n        newTasksList.push(stringArray);\n      }\n\n      this.setState({\n        tasksLists: newTasksList\n      });\n    };\n\n    this.state = {\n      tasks: savedTasks ? savedTasks : {},\n      newTask: {\n        task: \"\",\n        id: Date.now(),\n        completed: false\n      },\n      searchString: \"\",\n      searchResults: [],\n      selectedList: \"\",\n      tasksLists: []\n    };\n  }\n\n  componentDidMount() {\n    this.showAllTasks();\n    this.getTasksLists();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"app-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(SideBar, {\n      searchString: this.state.searchString,\n      searchInputChange: this.searchInputChange,\n      selectList: this.selectList,\n      showAllTasks: this.showAllTasks,\n      tasksLists: this.state.tasksLists,\n      newList: this.newList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"tasks-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(TodoList, {\n      tasks: this.state.searchResults,\n      selectedList: this.state.selectedList,\n      doubleClickTask: this.doubleClickTask,\n      searchString: this.state.searchString,\n      newTask: this.state.newTask,\n      changeHandler: this.changeHandler,\n      addTask: this.addTask,\n      clearCompleted: this.clearCompleted,\n      deleteList: this.deleteList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/calvarezberrios/Desktop/LambdaSchool/Projects/React-Todo/src/App.js"],"names":["React","TodoList","SideBar","savedTasks","localStorage","getItem","JSON","parse","App","Component","constructor","changeHandler","e","setState","newTask","state","task","target","value","addTask","preventDefault","selectedList","tasks","toLowerCase","setItem","stringify","id","Date","now","completed","doubleClickTask","classList","toggle","targetId","Number","Object","entries","forEach","clearCompleted","filter","searchInputChange","searchString","showAllTasks","selectList","selected","textContent","searchResults","allTasks","key","push","newList","name","prompt","deleteList","getTasksLists","getSearchResults","newResults","includes","componentDidUpdate","prevProps","prevState","newTasksList","stringArray","split","string","index","toUpperCase","slice","join","tasksLists","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport TodoList from \"./components/TodoList\";\nimport SideBar from \"./components/SideBar\";\n\n//localStorage.setItem(\"tasks\", \"\");\nconst savedTasks = localStorage.getItem(\"tasks\") ? JSON.parse(localStorage.getItem(\"tasks\")) : null;\n\nclass App extends React.Component {\n  // you will need a place to store your state in this component.\n  // design `App` to be the parent component of your application.\n  // this component is going to take care of state, and any change handlers you need to work with your state\n  constructor() {\n    super();\n    this.state = {\n      tasks: savedTasks ? savedTasks : {},\n      newTask: {\n        task: \"\",\n        id: Date.now(),\n        completed: false\n      },\n      searchString: \"\",\n      searchResults: [],\n      selectedList: \"\", \n      tasksLists: []\n    }\n  }\n\n  changeHandler = e => {\n    this.setState({\n      newTask: \n      {...this.state.newTask, \n        task: e.target.value\n      }\n    });\n  }\n\n  addTask = e => {\n    e.preventDefault();\n\n    if(this.state.newTask.task !== \"\") {\n    \n      if(this.state.selectedList !== \"\"){\n        this.setState({\n          tasks: \n          {\n            ...this.state.tasks,\n            [this.state.selectedList.toLowerCase()]:\n            [...this.state.tasks[this.state.selectedList.toLowerCase()], this.state.newTask]\n          }\n        }, () => localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks)));\n        \n        this.setState({newTask: {\n          task: \"\",\n          id: Date.now(),\n          completed: false\n        }});\n      } \n    }\n  }\n\n  doubleClickTask = e => {\n    \n    e.target.classList.toggle(\"completed\");\n\n    const targetId = Number(e.target.id);\n    \n\n    for (let [, value] of Object.entries(this.state.tasks)) {\n      value.forEach(task => {\n        if(task.id === targetId) {\n          task.completed = !task.completed;\n        }\n      })\n    }\n\n    localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\n    \n  }\n\n  clearCompleted = e => {\n    e.preventDefault();\n\n    this.setState({\n      tasks: {\n          ...this.state.tasks,\n          [this.state.selectedList.toLowerCase()]:\n          this.state.tasks[this.state.selectedList.toLowerCase()].filter(task => !task.completed)\n      }\n    }, () => localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks)));\n  }\n  \n  searchInputChange = e => {\n    this.setState({searchString: e.target.value});\n    this.showAllTasks();\n  }\n\n  selectList = e => {\n    const selected = e.target.textContent;\n    this.setState({selectedList: selected});\n    this.setState({searchResults: this.state.tasks[selected.toLowerCase()]})\n  }\n\n  showAllTasks = () => {\n    const allTasks = [];\n    \n    for (let [key] of Object.entries(this.state.tasks)) {\n      this.state.tasks[key].forEach(task => allTasks.push(task))\n      this.setState({searchResults: allTasks})\n    }\n\n    this.setState({selectedList: \"\"});\n  }\n\n  newList = () => {\n    const name = prompt(\"Enter a name for the new list\");\n\n    if(name !== \"\" && name !== null){\n      this.setState({\n        tasks: {\n          ...this.state.tasks,\n          [name.toLowerCase()]: []\n        } \n      }, () => localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks)));\n    }\n  }\n  \n  deleteList = () => {\n    this.setState({searchResults: []})\n    delete this.state.tasks[this.state.selectedList.toLowerCase()];\n\n    localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\n    this.showAllTasks();\n    this.getTasksLists();\n\n  }\n\n  getSearchResults = () => {\n    const newResults = this.state.searchResults.filter(task => task.task.toLowerCase().includes(this.state.searchString.toLowerCase()));\n\n    this.setState({searchResults: newResults});\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if(this.state.searchString !== prevState.searchString) {\n      if(this.state.searchString !== \"\"){\n\n        this.getSearchResults()\n      } else {\n        this.showAllTasks();\n      }\n    }     \n      \n    \n\n    if(this.state.tasks !== prevState.tasks) {\n\n\n      this.setState({searchResults: this.state.tasks[this.state.selectedList.toLowerCase()]})\n      \n      this.getTasksLists();\n    }\n  }\n\n  getTasksLists = () => {\n    let newTasksList = [];\n\n    for(let [key] of Object.entries(this.state.tasks)){\n\n      let stringArray = key.split(\" \");\n      stringArray.forEach((string, index) => stringArray[index] = string[0].toUpperCase() + string.slice(1));\n      stringArray = stringArray.join(\" \");\n\n      newTasksList.push(stringArray);\n      \n    }\n    \n    this.setState({tasksLists: newTasksList});\n  }\n\n  componentDidMount() {\n    this.showAllTasks();\n    this.getTasksLists();    \n  }\n\n  render() {\n\n    return (\n      <div id = \"app-container\">\n        <SideBar \n          searchString = {this.state.searchString}\n          searchInputChange = {this.searchInputChange}\n          selectList = {this.selectList}\n          showAllTasks = {this.showAllTasks}\n          tasksLists = {this.state.tasksLists}\n          newList = {this.newList}\n        />\n        \n        <div className = \"tasks-container\">\n          <TodoList tasks = {this.state.searchResults} \n            selectedList = {this.state.selectedList}\n            doubleClickTask = {this.doubleClickTask}\n            searchString = {this.state.searchString}\n            newTask = {this.state.newTask} \n            changeHandler = {this.changeHandler} \n            addTask = {this.addTask} \n            clearCompleted = {this.clearCompleted}\n            deleteList = {this.deleteList}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}